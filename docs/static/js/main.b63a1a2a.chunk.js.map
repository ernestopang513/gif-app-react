{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","category","toUpperCase","className","href","src","alt","getGifs","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uMAIaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EAENC,mBAAS,IAFH,mBAEnCC,EAFmC,KAEvBC,EAFuB,KAoB1C,OACG,0BAAQC,SAXU,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAY,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACrCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAST,EACTU,SArBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,YCgBhBG,EAvBK,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,GAAGC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,IAAIC,EAAa,EAAbA,SAQ/B,OANIF,GAAwB,IAAfA,EAAMT,SACfS,EAAK,UAAME,EAASC,cAAf,SAML,yBAAKC,UAAY,2CAA2CL,GAAMA,GAC9D,uBAAGM,KAAQJ,EAAKJ,OAAS,UACrB,yBAAKS,IAAML,EAAKM,IAAKP,KAEzB,2BAAIA,K,uBCbHQ,EAAO,uCAAG,WAAMN,GAAN,uBAAAO,EAAA,6DAEbR,EAFa,0FAE4ES,UAAUR,GAFtF,sBAIKS,MAAMV,GAJX,cAIbW,EAJa,gBAKEA,EAAUC,OALZ,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QAXvB,kBAeZc,GAfY,4CAAH,sDC2CLK,EAxCC,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECHJ,SAACA,GAAa,IAAD,EAEXjB,mBAAS,CAE/B6B,KAAM,GACNO,SAAS,IALwB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAoBrC,OAZAC,qBAAU,WAENhB,EAAQN,GACHuB,MAAK,SAAAC,GACFH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAItB,CAACnB,IAEGoB,EDTyBK,CAAazB,GAAhCgB,EARe,EAQpBJ,KAAaO,EARO,EAQPA,QAKrB,OACI,oCACI,4BAAKnB,GAEJmB,GAAW,0CACZ,yBAAKjB,UAAY,aAITc,EAAOF,KAAK,SAACC,GAAD,OACR,kBAAC,EAAD,eACAW,IAAOX,EAAIlB,IACPkB,EAFJ,CAGAf,SAAYA,WEQrB2B,EAlCM,WAAM,MAGW5C,mBAAS,CAAC,UAHrB,mBAGf6C,EAHe,KAGJ9C,EAHI,KASvB,OACI,oCACE,4CACA,kBAAC,EAAD,CAAaA,YAAaA,IAC1B,6BAEA,4BAEQ8C,EAAWd,KAAI,SAAAd,GAAQ,OACjB,kBAAC,EAAD,CACI0B,IAAO1B,EACPA,SAAUA,U,MCrBtC6B,IAASC,OAEL,kBAAC,EAAD,MAGDC,SAASC,eAAe,U","file":"static/js/main.b63a1a2a.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({setCategory}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleImputChange = (e) => {\r\n        // console.log(e.target.value)\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    \r\n    const handleSummit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategory(cats => [ inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n       \r\n    }\r\n    return (\r\n       <form   onSubmit = {handleSummit} >\r\n            <input\r\n                type='text'\r\n                value = {inputValue}\r\n                onChange = {handleImputChange}\r\n                \r\n            />\r\n         </form>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategory: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ({id,title,url,category})=> {\r\n\r\n    if(!title || title.trim() ==''){\r\n        title = `${category.toUpperCase()} GIF`;\r\n    }\r\n    // console.log(title)\r\n\r\n    \r\n    return (\r\n        <div className = 'card animate__animated animate__rotateIn' id = {id}>\r\n            <a href = {url} target = '_blank'>\r\n                <img src= {url} alt={title}/>\r\n            </a>\r\n            <p>{title}</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n\r\n}\r\n\r\nexport default GifGridItem\r\n","\r\n\r\n\r\nexport const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=uyMoQ3uHapheXU2EAulEy2nyVhZdIuOk&q=${encodeURI(category)}&limit=10`\r\n\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n\r\n\r\n}","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport GifGridItem from './GifGridItem'\r\nimport { getGifs } from '../helpers/getGifs'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //     .then( setImages)\r\n    // }, [category])\r\n    const { data:images, loading} = useFetchGifs(category);\r\n\r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            {loading && <p>Cargando...</p>}\r\n            <div className = 'card-grid'>\r\n                \r\n                \r\n                    { \r\n                    images.map( (img)=> (\r\n                        <GifGridItem \r\n                        key = {img.id}\r\n                        {...img}\r\n                        category = {category}\r\n                        />\r\n                    ))\r\n                    }\r\n                \r\n            </div>\r\n        </>        \r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n\r\n}\r\n\r\nexport default GifGrid\r\n","import {useState, useEffect} from 'react'\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) =>{\r\n\r\n    const [state, setstate] = useState({\r\n\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(()=>{\r\n        \r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n}","\r\nimport React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Naruto', 'Dragon Ball', 'Kanji'];\r\n     const [categories,setCategory] = useState(['space'])\r\n\r\n    // const handleAdd = () => {\r\n    //     setstate([...categories, 'Carros'])\r\n    // }\r\n\r\n    return (\r\n        <>\r\n          <h2>GifExpertApp</h2>  \r\n          <AddCategory setCategory={setCategory}/>\r\n          <hr /> \r\n          \r\n          <ul>\r\n              {\r\n                  categories.map(category =>(\r\n                        <GifGrid \r\n                            key = {category}    \r\n                            category={category}\r\n                        />\r\n                  ))\r\n              }\r\n          </ul>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nGifExpertApp.propTypes = {\r\n\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n\n   document.getElementById('root')\n);\n"],"sourceRoot":""}